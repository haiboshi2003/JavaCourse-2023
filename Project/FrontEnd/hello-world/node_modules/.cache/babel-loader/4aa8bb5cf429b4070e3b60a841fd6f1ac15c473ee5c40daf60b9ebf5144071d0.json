{"ast":null,"code":"//创建新的axios对象\n// 创建新的 axios 对象\nimport axios from 'axios';\nconst _axios = axios.create({\n  baseURL: 'http://localhost:7078'\n});\n\n// 请求拦截器\n_axios.interceptors.request.use(config => {\n  // 每次发送请求之前判断vuex中是否存在token\n  // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\n  // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\n  const token = window.localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = token;\n  }\n  return config;\n}, error => {\n  return Promise.error(error);\n});\nexport default _axios;","map":{"version":3,"names":["axios","_axios","create","baseURL","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise"],"sources":["H:/GitHub-Repository/hengsheng/hello-world/src/api/request.js"],"sourcesContent":["//创建新的axios对象\r\n// 创建新的 axios 对象\r\nimport axios from 'axios'\r\nconst _axios = axios.create({\r\n  baseURL: 'http://localhost:7078'\r\n})\r\n\r\n// 请求拦截器\r\n_axios.interceptors.request.use(\r\n  config => {\r\n    // 每次发送请求之前判断vuex中是否存在token\r\n    // 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况\r\n    // 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断\r\n    const token = window.localStorage.getItem(\"token\");\r\n    if (token) {\r\n      config.headers.Authorization = token;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.error(error);\r\n  }\r\n  )\r\n\r\nexport default _axios"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,MAAM,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC1BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,MAAM,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACR;EACA;EACA;EACA,MAAMC,KAAK,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAClD,IAAIH,KAAK,EAAE;IACTD,MAAM,CAACK,OAAO,CAACC,aAAa,GAAGL,KAAK;EACtC;EACA,OAAOD,MAAM;AACf,CAAC,EACDO,KAAK,IAAI;EACP,OAAOC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;AAC7B,CACA,CAAC;AAEH,eAAeb,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}